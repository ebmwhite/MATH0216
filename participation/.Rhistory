#this is a comment
#this assigns the value of 2+2=4 to the object z (see it in the environment in top right)
z <- 2+2 #notice this code doesn't print out anything
#to print out the value of z we need to write z
z
get_engine(options$engine)
names(knitr::knit_engines$get())
2+2
2+2
2+3
x<-4
install.packages(c("caret", "corrplot", "data.table", "dendextend", "geojsonio", "ggrepel", "plotly", "quanteda", "randomForest", "rattle", "rgdal", "rtweet", "tidytext"))
?mean
NYCairbnb <- read.csv(NYCairbnb2019.csv)
NYCairbnb <- read.csv("NYCairbnb2019.csv")
View(NYCairbnb)
library(openintro)
library("openintro")
library("openintro")
library("openintro")
diamonds
?openintro
library("openintro")
cars
dim(NYCairbnb)
names(NYCairbnb)
NYCairbnb$price
NYCairbnb[price,]
NYCairbnb$price
NYCairbnb[,price]
NYCairbnb$price
NYCairbnb[,10]
NYCairbnb$price
NYCairbnb[,10]
attach(NYCairbnb)
price
NYCairbnb$price
NYCairbnb[,10]
attach(NYCairbnb)
price
mean(NYCairbnb$price)
mean(NYCairbnb$price)
sd(NYCairbnb$price)
NYCairbnb[1,2]
View(NYCairbnb)
NYCairbnb[1,3]
NYCairbnb[NYCairbnb$price <= 100,]
NYCairbnb[NYCairbnb$price <= 50,]
NYCairbnb[NYCairbnb$price <= 25,]
NYCairbnb[NYCairbnb$price <= 80,]
NYCairbnb[NYCairbnb$price >=8000,]
NYCairbnb[NYCairbnb$price >=8000, c(1,3,4)]
NYCairbnb[NYCairbnb$price >=8000, c("id","host_id")]
NYCairbnb$price
NYCairbnb[,"price"]
NYCairbnb[,10]
attach(NYCairbnb)
price
names(NYCairbnb)
NYCairbnb[NYCairbnb$price >=8000, "name"]
NYCairbnb[NYCairbnb$price >=8000, c("host_name","neighbourhood", "price")]
NYCairbnb[NYCairbnb$price >=8000, c("host_name","neighbourhood", "room_type","price")]
NYCairbnb[NYCairbnb$price ==110, c("host_name","neighbourhood", "room_type","price")]
NYCairbnb[NYCairbnb$price ==107, c("host_name","neighbourhood", "room_type","price")]
NYCairbnb[NYCairbnb$price ==68, c("host_name","neighbourhood", "room_type","price")]
NYCairbnb[NYCairbnb$price == 20, c("host_name","neighbourhood", "room_type","price")]
NYCairbnb[NYCairbnb$price <=30 & NYCairbnb >=25, c("host_name","neighbourhood", "room_type","price")]
hist(NYCairbnb$price)
tapply(NYCairbnb$price, NYCairbnb$neighbourhood, mean)
tapply(NYCairbnb$price, NYCairbnb$neighbourhood_group, mean)
hist(NYCairbnb$price)
hist(NYCairbnb$price)
boxplot(NYCairbnb$price)
data<-c(8,20,88,95,98)
plot(1:5, data)
barplot(1:5, data)
?plot
plot(1:5, data)
barplot(1:5, data)
?barplot
barplot(data)
barplot(data, ylim=c(0,100))
?barplot
barplot(data, ylim=c(0,100), density=T)
barplot(data, ylim=c(0,100))
barplot(data, ylim=c(0,100), col=c(rep("red",3),"grey", "grey"))
barplot(data, ylim=c(0,100), col=c(rep("red",3),"pink", "pink"))
names(NYCairbnb)
plot(availability_365, reviews_per_month)
plot(price, reviews_per_month)
x<-56
x*2 #multiply
x/2 #divide
x^2 #x to the power of 2
x*2 #multiply
x*2 #multiply
x/2 #divide
x^2 #x to the power of 2
y <- x*2 #multiply
x/2 #divide
x^2 #x to the power of 2
y <- x*2 #multiply
# note that because value is assigned to y, it won't print out
y #prints out the value of y
x/2 #divide
x^2 #x to the power of 2
# c()
heights <- c(67, 100, 34, 78, 80)
heights[3]
heights <- c(heights, 90)
heights <- c(heights, 90)
heights
# c() function: concatenate
heights <- c(67, 100, 34, 78, 80)
heights <- c(heights, 90)
heights
airbnb <- read.csv(NYCairbnb2019.csv)
airbnb <- read.csv("NYCairbnb2019.csv")
View(airbnb)
library("openintro")
cars
install.packages("openintro")
library("openintro")
cars
dim(airbnb)
names(airbnb)
airbnb$latitude
airbnb$latitude
airbnb[,3]
airbnb[,"latitude"]
attach(airbnb)
latitude
airbnb$latitude
airbnb[,3]
airbnb[,"latitude"]
attach(airbnb)
latitude
airbnb$latitude
airbnb[,3]
airbnb[,"latitude"]
attach(airbnb)
latitude
airbnb$latitude
airbnb[,3]
airbnb[,"latitude"]
attach(airbnb)
latitude
airbnb$latitude
airbnb[,3]
airbnb[,"latitude"]
attach(airbnb)
latitude
mean(airbnb$price)
mean(airbnb$price)
median(airbnb$price)
mean(airbnb$price)
median(airbnb$price)
sd(airbnb$price) #standard deviation
tapply(airbnb$price, airbnb$neighbourhood_group, mean)
tapply(airbnb$price, airbnb$neighbourhood_group, mean)
tapply(airbnb$price, airbnb$room_type, mean)
airbnb[airbnb$price >= 8000,]
airbnb[airbnb$neighbourhood_group=="Manhatten"]
airbnb[airbnb$neighbourhood_group=="Manhattan",]
hist(airbnb$price)
hist(airbnb$price)
plot(airbnb$reviews_per_month, airbnb$price)
install.packages("tidyverse")
?select
airbnb <- read.csv("NYCairbnb2019.csv")
is.factor(airbnb$neighbourhood_group)
is.factor(airbnb$room_type)
levels(airbnb$room_type)
names(airbnb)
cars
names(cars)
library("openintro")
cars
2+2
x<-4
x<-56
y <- x*2 #multiply
# note that because value is assigned to y, it won't print out
y #prints out the value of y
x/2 #divide
x^2 #x to the power of 2
# c() function: concatenate
heights <- c(67, 100, 34, 78, 80)
heights[3]
heights <- c(heights, 90)
heights
airbnb <- read.csv("NYCairbnb2019.csv")
library("openintro")
cars
# dim() spits out dimensions of a dataframe
dim(airbnb)
mean(airbnb$price)
median(airbnb$price)
sd(airbnb$price) #standard deviation
# calculates the mean price, broken down by neighbourhood group
tapply(airbnb$price, airbnb$neighbourhood_group, mean)
#calculates the mean price, broken down by room type
tapply(airbnb$price, airbnb$room_type, mean)
# prints out all the rows where the price is more than 8000
airbnb[airbnb$price >= 8000,]
hist(airbnb$price)
plot(airbnb$reviews_per_month, airbnb$price)
names(cars)
head(cars)
is.factor(small)
is.factor(cars$type)
levels(cars$type)
names(cars)
plot(cars$mpgCity, cars$weight)
plot(cars$mpgCity, cars$weight)
boxplot(cars$mpgCity)
plot(cars$mpgCity, cars$weight)
boxplot(cars$mpgCity ~ cars$type)
#to check whether something is a factor
is.factor(cars$type)
# to make something a factor
cars$type <- as.factor(cars$type)
#to see the levels
levels(cars$type)
# to make something a factor
cars$type <- factor(cars$type)
#to check whether something is a factor
is.factor(cars$type)
#to change the order
cars$type <- factor(cars$type, levels = c("small", "midsize", "large", ordered=T))
#to see the levels
levels(cars$type)
#to see the number of levels
nlevels(cars$type)
#to change the order
cars$type <- factor(cars$type, levels = c("small", "midsize", "large"))
#to see the levels
levels(cars$type)
#to see the number of levels
nlevels(cars$type)
#to change the order
cars$type <- factor(cars$type, levels = c("small", "midsize", "large"), ordered=T)
#to see the levels
levels(cars$type)
#to see the number of levels
nlevels(cars$type)
#to change the order or to give order
cars$type <- factor(cars$type, levels = c("small", "midsize", "large"), ordered=T)
#to change the order or to give order
cars$type <- factor(cars$type, levels = c("small", "midsize", "large"), ordered=T)
min(cars$type)
mean(airbnb$number_of_reviews)
View(airbnb)
mean(airbnb$reviews_per_month)
# use arguement na.rm to remove NAs
mean(airbnb$reviews_per_month, na.rm=T)
# use arguement na.rm to remove NAs
mean(airbnb$reviews_per_month, na.rm=T)
#OR
# use function na.omit() to return a vector without NAs, then take the mean
mean(na.omit(airbnb$reviews_per_month))
# to rename factors
car$type[car$type == "large"]<-"big"
# to rename factors
cars$type[cars$type == "large"]<-"big"
#to change the order or to give order
cars$type <- factor(cars$type, levels = c("small", "midsize", "large"), ordered=T)
min(cars$type)
# to rename factors
cars$type[cars$type == "large"]<-"big"
#to change the order or to give order
cars$type <- factor(cars$type, levels = c("small", "midsize", "large"), ordered=T)
min(cars$type)
# to rename factors
cars$type[cars$type == "large"]<-"big"
#to change the order or to give order
cars$type <- factor(cars$type, levels = c("small", "midsize", "large"), ordered=T)
min(cars$type)
View(cars)
# to rename factors
cars$type[cars$type == "large"] <- 'big'
# to rename factors
cars$type[cars$type == "large"] <- big
# to rename factors
cars$type[cars$type == "large"] <- "big"
#to change the order or to give order
cars$type <- factor(cars$type, levels = c("small", "midsize", "large"), ordered=T)
min(cars$type)
View(cars)
table(cars$type)
#to see the levels
levels(cars$type)
#to see the number of levels
nlevels(cars$type)
#to check whether something is a factor
is.factor(cars$type)
# to make something a factor
cars$type <- factor(cars$type)
#to see the levels
levels(cars$type)
#to see the number of levels
nlevels(cars$type)
# to rename factors
cars$type[cars$type == "large"] <- "big"
library(cars)
library(openintro)
cars
table(cars$type)
?levels
levels(cars$type)
library(gsheet)
library(tidyverse)
library(randomcoloR)
library(kableExtra)
library(lemon)
data <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1-5Tz0ogZvO2k1Dv1lIW8W_YuY0qH2AZb1MmZmN6_wy4/edit?usp=sharing')
totals <- data %>%
group_by(Name) %>%
summarize(total = sum(Points))
set.seed(1)
totals$key <- distinctColorPalette(26)
total_sort<- totals %>%
select(total, key) %>%
arrange(-total)
library(gsheet)
library(tidyverse)
library(randomcoloR)
library(kableExtra)
data <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1-5Tz0ogZvO2k1Dv1lIW8W_YuY0qH2AZb1MmZmN6_wy4/edit?usp=sharing')
totals <- data %>%
group_by(Name) %>%
summarize(total = sum(Points))
set.seed(1)
totals$key <- distinctColorPalette(26)
total_sort<- totals %>%
select(total, key) %>%
arrange(-total)
kable(total_sort) %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F)
setwd("~/Google Drive/MATH0216/admin")
export.csv(totals, "total.csv")
write.csv(totals, "total.csv")
totals$key <- distinctColorPalette(26)
distinctColorPalette(26)
distinctColorPalette(26)
distinctColorPalette(26)
set.seed(1)
distinctColorPalette(26)
distinctColorPalette(26)
set.seed(1)
distinctColorPalette(26)
totals <- data %>%
filter(name == "Chung, Jay-Ho")
totals <- data %>%
filter(Name == "Chung, Jay-Ho")
data <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1-5Tz0ogZvO2k1Dv1lIW8W_YuY0qH2AZb1MmZmN6_wy4/edit?usp=sharing')
totals <- data %>%
group_by(Name) %>%
summarize(total = sum(Points))
data %>%
filter(Name == "Chung, Jay-Ho")
for(i in totals$Name){
print <- data %>%
filter(Name == i)
write.csv(print, paste(i,"csv", sep="."))
}
setwd("~/Google Drive/MATH0216/admin")
for(i in totals$Name){
print <- data %>%
filter(Name == i)
write.csv(print, paste(i,"csv", sep="."))
}
paste(i,"csv", sep=".")
for(i in totals$Name){
data %>%
filter(Name == i)
#write.csv(test, paste(i,"csv", sep="."))
}
for(i in totals$Name){
data %>%
filter(Name == i)
#write.csv(test, paste(i,"csv", sep="."))
}
for(i in totals$Name){ print(i)}
test %>%
seperate(Name, c(Last, First), sep=",")
test <- data %>%
filter(Name == i)
test
test %>%
seperate(Name, c(Last, First), sep=",")
library(tidyr)
test %>%
seperate(Name, c(Last, First), sep=",")
test %>%
separate(Name, c(Last, First), sep=",")
test %>%
separate(Name, c("Last", "First"), sep=",")
test %>%
separate(Name, c("Last", "First"), sep=",")
write.csv(test, paste(test$Last[1],"csv", sep="."))
test <- data %>%
filter(Name == i) %>%
separate(Name, c("Last", "First"), sep=",")
test
paste(test$Last[1],"csv", sep=".")
test <- data %>%
filter(Name == i) %>%
separate(Name, c("Last", "First"), sep=",")
write.csv(test, paste(test$Last[1],"csv", sep="."))
View(test)
write.csv(test, paste(test$Last[1],"csv", sep="."))
setwd("~/Google Drive/MATH0216/GitHub/participation")
for(i in totals$Name){
test <- data %>%
filter(Name == i) %>%
separate(Name, c("Last", "First"), sep=",")
write.csv(test, paste(test$Last[1],"csv", sep="."))
}
View(totals)
View(total_sort)
View(totals)
totals$key <- distinctColorPalette(26)
View(totals)
for(i in totals$Name){
test <- data %>%
filter(Name == i) %>%
separate(Name, c("Last", "First"), sep=",")
write.csv(test, paste(test$Key[1],"csv", sep="."))
}
for(i in totals$Name){
test <- data %>%
filter(Name == i) %>%
separate(Name, c("Last", "First"), sep=",")
write.csv(test, paste(test$Last[1],"csv", sep="."))
}
for(i in totals$Name){
test <- data %>%
filter(Name == i) %>%
separate(Name, c("Last", "First"), sep=",")
write.csv(test, paste(test$Last[1],"csv", sep="."))
}
install.packages("mailR")
install.packages("RDCOMClient", repos = " http://www.omegahat.net/R")
library("RDCOMClient")
install.packages("RDCOMClient", repos = " http://www.omegahat.net/R")
install.packages("RDCOMClient")
install.packages("RDCOMClient", repos = " http://www.stats.ox.ac.uk/pub/RWin")
send.mail(from="emalcolmwhite@gmail.com",
to="emalcolmwhite@middlebury.com",
subject="Test Email",
body="PFA the desired document",
html=T,
smtp=list(host.name = "smtp.gmail.com",
port = 465,
user.name = "emalcolmwhite@gmail.com",
passwd = "m10E8th-23608",
ssl = T),
authenticate=T)
library(mailR)
send.mail(from="emalcolmwhite@gmail.com",
to="emalcolmwhite@middlebury.com",
subject="Test Email",
body="PFA the desired document",
html=T,
smtp=list(host.name = "smtp.gmail.com",
port = 465,
user.name = "emalcolmwhite@gmail.com",
passwd = "m10E8th-23608",
ssl = T),
authenticate=T)
library(mailR)
install.packages("emayili")
install.packages("blastula")
library(blastula)
library(blastula)
email <- compose_email(body = "Insert your e-mail body here",
footer = "Insert your e-mail footer here")
preview_email(email)
View(email)
preview_email(email)
install.packages("sendmailR")
library(sendmailR)
sendmail_options(smtpServer="ASPMX.L.GOOGLE.COM")
sendmail_options(smtpServer="smtp.office365.com")
from <- "<emalcolmwhite@middlebury.com>"
to <- "<emilybmwhite@gmail.com.com>"
subject <- "Welcome!"
msg <- "To The Rock"
sendmail(from, to, subject, msg)
?sendmail_options
sendmail_options(smtpServer="smtp.office365.com", smtpPort=587)
sendmail(from, to, subject, msg)
>sendmailR
?sendmailR
library(gsheet)
library(tidyverse)
library(randomcoloR)
library(kableExtra)
data <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1-5Tz0ogZvO2k1Dv1lIW8W_YuY0qH2AZb1MmZmN6_wy4/edit?usp=sharing')
totals <- data %>%
group_by(Name) %>%
summarize(total = sum(Points))
set.seed(1)
totals$key <- distinctColorPalette(26)
set.seed(1)
totals$key2 <- sample(letters)
total_sort<- totals %>%
select(total, key2) %>%
arrange(-total)
View(total_sort)
View(totals)
