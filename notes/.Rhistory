summary()
winner.model <-glm(factor(spam) ~ winner,
data = email,
family = "binomial") %>%
summary()
viagra.model <-glm(factor(spam) ~ viagra,
data = email,
family = "binomial") %>%
summary()
full.model <-glm(factor(spam) ~ .,
data = email,
family = "binomial") %>%
stepAIC()
full.model <- lm(Price ~ Size + Beds + Baths + New, data=house)
summary(full.model)
AIC(model)
AIC(full.model)
step(full.model)
step(full.model)
step(full.model) %>%
summary()
step(full.model)
step(full.model) %>%
coef(full.model)
step(full.model)
step(full.model) %>%
coef()
step(full.model)
library(MASS)
full.model <-glm(factor(spam) ~ .,
data = email,
family = "binomial")
stepAIC(full.model)
library(MASS)
full.model <-glm(factor(spam) ~ .,
data = email,
family = "binomial")
stepAIC(full.model)
library(MASS)
full.model <-glm(factor(spam) ~ .,
data = email,
family = "binomial")
stepAIC(full.model, trace = F)
step(full.model)
step(full.model, trace=F)
full.model <- lm(Price ~ Size + Beds + Baths + New, data=house)
summary(full.model)
step(full.model)
step(full.model, trace=F)
# to just print out the best model
step(full.model, trace=F)
viagra.model <-glm(factor(spam) ~ viagra,
data = email,
family = "binomial")
summary(viagra.model)
model <- lm(Price ~ Size, data = house)
coef(model)
house %>%
ggplot(aes(x = Size,
y = Price)) +
geom_point() +
geom_abline(slope = coef(model)[2],
intercept = coef(model)[1],
color = "red",
size = 1) +
theme_light()
library(MASS)
full.model <-glm(factor(spam) ~ .,
data = email,
family = "binomial")
stepAIC(full.model, trace = F)
winner.model <-glm(factor(spam) ~ winner,
data = email,
family = "binomial")
summary(winner.model)
viagra.model <-glm(factor(spam) ~ viagra,
data = email,
family = "binomial")
summary(viagra.model)
newdata = data.frame(winner=0)
predict(winner.model, newdata, type="response")
newdata = data.frame(winner="0")
predict(winner.model, newdata, type="response")
newdata = data.frame(winner=as.factor(0))
predict(winner.model, newdata, type="response")
newdata = data.frame(winner="yes")
predict(winner.model, newdata, type="response")
newdata = data.frame(winner="no")
predict(winner.model, newdata, type="response")
newdata = data.frame(winner="yes")
predict(winner.model, newdata, type="response")
newdata =
predict(winner.model, data.frame(winner="yes"), type="response")
predict(winner.model, data.frame(winner="yes"), type="response")
predict(winner.model, data.frame(winner="yes"), type="response")
predict(winner.model, data.frame(winner="no"), type="response")
table(email$spam, email$viagra)
winner.model <-glm(factor(spam) ~ winner,
data = email,
family = "binomial")
summary(winner.model)
predict(winner.model, data.frame(winner="yes"), type="response")
predict(winner.model, data.frame(winner="no"), type="response")
house <- read.csv("https://raw.githubusercontent.com/ebmwhite/MATH0216/master/data/HousePrices.csv")
head(house)
house <- read.csv("https://raw.githubusercontent.com/ebmwhite/MATH0216/master/data/HousePrices.csv")
head(house)
View(house)
table(house$Beds)
house %>%
ggplot(aes(x = Price)) +
geom_histogram(bins=10) +
theme_light()
house %>%
ggplot(aes(x = Price)) +
geom_histogram(bins=15) +
theme_light()
house %>%
ggplot(aes(x = Size,
y = Price)) +
geom_point() +
theme_light()
lm(Price ~ Size, data = house)
#lm = linear model
model <- lm(Price ~ Size, data = house)
coef(model)
house %>%
ggplot(aes(x = Size,
y = Price)) +
geom_point() +
geom_abline(slope = coef(model)[2],
intercept = coef(model)[1],
color = "red",
size = 1) +
theme_light()
plot(model)
predict.lm(model, data.frame(Size = 2000))
full.model <- lm(Price ~ Size + Beds + Baths + New, data=house)
summary(full.model)
full.model <- lm(Price ~ Size + Beds + Baths + New, data=house)
summary(full.model)
#to see the steps
step(full.model)
# to just print out the best model
step(full.model, trace=F)
library(openintro)
data("email")
force(email)
View(email)
?email
viagra.model <-glm(factor(spam) ~ viagra,
data = email,
family = "binomial")
summary(viagra.model)
winner.model <-glm(factor(spam) ~ winner,
data = email,
family = "binomial")
summary(winner.model)
predict(winner.model, data.frame(winner="yes"), type="response")
predict(winner.model, data.frame(winner="no"), type="response")
taboo <-read.csv("https://ebmwhite.github.io/MATH0216/assignments/taboo.csv")
taboo <-read.csv("https://ebmwhite.github.io/MATH0216/assignments/taboo.csv")
taboo <-read.csv("https://ebmwhite.github.io/MATH0216/assignments/taboo.csv")
taboo <-read.csv("https://raw.githubusercontent.com/ebmwhite/MATH0216/master/assignments/taboo.csv")
taboo <-read.csv("https://raw.githubusercontent.com/ebmwhite/MATH0216/master/assignments/taboo.csv")
?which
which(total >=40)
which(total_sort$total >=40)
library(gsheet)
library(tidyverse)
library(randomcoloR)
library(kableExtra)
data <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1-5Tz0ogZvO2k1Dv1lIW8W_YuY0qH2AZb1MmZmN6_wy4/edit?usp=sharing')
totals <- data %>%
group_by(Name) %>%
summarize(total = sum(Points, na.rm=T))
set.seed(1)
totals$key <- distinctColorPalette(26)
set.seed(1)
totals$key2 <- sample(letters)
total_sort<- totals %>%
select(total, key2) %>%
arrange(-total)
View(totals)
#read in the data from website, ensure you are connected to the internet
all_data<-read.csv("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/Jamesetal2015Experiment2.csv")
#condition is only coded as 1,2,3,4 -- this relabels them
all_data$Condition <- as.factor(all_data$Condition)
levels(all_data$Condition) <- c("Control",
"Reactivation+Tetris",
"Tetris_only",
"Reactivation_only")
#read in the data from website, ensure you are connected to the internet
all_data<-read.csv("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/Jamesetal2015Experiment2.csv")
#condition is only coded as 1,2,3,4 -- this relabels them
all_data$Condition <- as.factor(all_data$Condition)
levels(all_data$Condition) <- c("Control",
"Reactivation+Tetris",
"Tetris_only",
"Reactivation_only")
setwd("~/Google Drive/MATH0216/GitHub/data")
write.csv(all_data, "tetris.csv")
#read in the data from website, ensure you are connected to the internet
all_data<-read.csv("https://raw.githubusercontent.com/ebmwhite/MATH0216/master/data/tetris.csv")
library(gsheet)
library(tidyverse)
library(randomcoloR)
library(kableExtra)
data <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1-5Tz0ogZvO2k1Dv1lIW8W_YuY0qH2AZb1MmZmN6_wy4/edit?usp=sharing')
totals <- data %>%
group_by(Name) %>%
summarize(total = sum(Points, na.rm=T))
set.seed(1)
totals$key <- distinctColorPalette(26)
set.seed(1)
totals$key2 <- sample(letters)
total_sort<- totals %>%
select(total, key2) %>%
arrange(-total)
View(totals)
?qt
qt(0.05, 10)
library(tidyverse)
library(ggplot2)
theme_set(theme_minimal())
library(gapminder)
head(gapminder)
gapminder %>%
filter(year == 1967) %>%
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy")
gapminder %>%
#  filter(year == 1967) %>% now we want all years included
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
# here we add animation stuff
transition_time(year) +
labs(title = "Year {frame_time}")
library(gganimate)
gapminder %>%
#  filter(year == 1967) %>% now we want all years included
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
# here we add animation stuff
transition_time(year) +
labs(title = "Year {frame_time}")
ggplot(
airquality,
aes(Day, Temp, group = Month, color = factor(Month))
) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Day of Month", y = "Temperature") +
theme(legend.position = "top")
head(airquality)
ggplot(
airquality,
aes(Day, Temp, group = Month, color = factor(Month))
) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Day of Month", y = "Temperature") +
theme(legend.position = "top") +
transition_reveal(day)
ggplot(
airquality,
aes(Day, Temp, group = Month, color = factor(Month))
) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Day of Month", y = "Temperature") +
theme(legend.position = "top") +
transition_reveal(Day)
airquality %>%
ggplot(aes(Day, Temp, group = Month, color = factor(Month))) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Day of Month", y = "Temperature") +
theme(legend.position = "top") +
## ADD THIS CODE TO ANIMATE
transition_reveal(Day)
airquality %>%
ggplot(aes(Day, Temp, group = Month, color = factor(Month))) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Day of Month", y = "Temperature") +
theme(legend.position = "top") +
## ADD THIS CODE TO ANIMATE
transition_reveal(Day)
?airquality
ggplot(
airquality,
aes(Day, Temp, group = Month, color = factor(Month))
) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Day of Month", y = "Temperature") +
theme(legend.position = "top")
airquality %>%
ggplot(aes(Day, Temp, group = Month, color = factor(Month))) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Day of Month", y = "Temperature") +
theme(legend.position = "top") +
## ADD THIS CODE TO ANIMATE
transition_reveal(Day)
library(plotly)
intall.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(plotly)
data(gapminder, package = "gapminder")
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids = country)) +
scale_x_log10()
ggplotly(gg)
data(gapminder, package = "gapminder")
gg <- ggplot(gapminder,
aes(gdpPercap, lifeExp, color = continent)) +
geom_point(
aes(size = pop, frame = year, ids = country)) +
scale_x_log10()
ggplotly(gg)
p <- gapminder %>%
#  filter(year == 1967) %>% now we want all years included
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
# here we add animation stuff
transition_time(year) +
labs(title = "Year {frame_time}")
library(gganimate)
p <- gapminder %>%
#  filter(year == 1967) %>% now we want all years included
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
# here we add animation stuff
transition_time(year) +
labs(title = "Year {frame_time}")
library(tidyverse)
library(tidyverse)
library(tidyverse)
anim_save("gapminder.gif", animation=p )
table <-matrix(c(154, 246, 132, 268), nrow=2, ncol=2)
table <-matrix(c(154, 246, 132, 268), nrow=2, ncol=2)
chisq.test(table, correct=F)
setwd("~/Google Drive/MATH0216/GitHub/notes")
anim_save("gapminder.mp4", animation=p )
p <- gapminder %>%
#  filter(year == 1967) %>% now we want all years included
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
# here we add animation stuff
transition_time(year) +
labs(title = "Year {frame_time}")
library(tidyverse)
library(ggplot2)
theme_set(theme_minimal())
library(gapminder)
head(gapminder)
gapminder %>%
filter(year == 1967) %>%
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy")
library(gganimate)
p <- gapminder %>%
#  filter(year == 1967) %>% now we want all years included
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
# here we add animation stuff
transition_time(year) +
labs(title = "Year {frame_time}")
anim_save("gapminder.gif", animation=p )
anim_save("gapminder.mp4", animation=p )
animate(p, 200, fps = 20,  width = 1200, height = 1000,
renderer = gifski_renderer("p.gif"))
p <- gapminder %>%
#  filter(year == 1967) %>% now we want all years included
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
# here we add animation stuff
transition_time(year) +
labs(title = "Year {frame_time}")
animate(p, 200, fps = 20,  width = 1200, height = 1000,
renderer = gifski_renderer("p.gif"))
animate(p, 200, fps = 20,  width = 1200, height = 1000)
transition_time
?transition_time
animate(p, fps=1)
animate(p, fps=20)
?anim_save
?ease_aes
p + ease_aes("bounce-in-out")
p + ease_aes("bounce-in")
library(ggplot2)
theme_set(theme_minimal())
library(gapminder)
head(gapminder)
gapminder %>%
filter(year == 1967) %>%
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = T, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy")
gapminder %>%
filter(year == 1967) %>%
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy")
library(gganimate)
p <- gapminder %>%
#  filter(year == 1967) %>% now we want all years included
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
# here we add animation stuff
transition_time(year) +
labs(title = "Year {frame_time}")
gapminder %>%
#  filter(year == 1967) %>% now we want all years included
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
# here we add animation stuff
transition_time(year) +
labs(title = "Year {frame_time}")
p<-gapminder %>%
#  filter(year == 1967) %>% now we want all years included
ggplot(aes(x = gdpPercap,
y=lifeExp,
size = pop)) +
geom_point(show.legend = F, aes(color=continent)) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") +
# here we add animation stuff
transition_time(year) +
labs(title = "Year {frame_time}")
animate(p, fps=20)
animate(p, fps=1)
p + ease_aes("bounce-in")
p<- airquality %>%
ggplot(aes(Day, Temp, group = Month, color = factor(Month))) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Day of Month", y = "Temperature") +
theme(legend.position = "top") +
## ADD THIS CODE TO ANIMATE
transition_reveal(Day)
anim_save("airquality.gif", animation=p )
p
library(plotly)
library(tidyverse)
